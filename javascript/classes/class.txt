You can declare a class using the class keyword.

class Person {
  name;

  constructor(name) {
    this.name = name;
  }

  introduceSelf() {
    console.log(`Hi! I'm ${this.name}`);
  }
}

This declares a class named Person with a name property and an introduceSelf method.

A constructor is a function that is called when a new instance of the class is created That is used 
to initialize the properties of the object.

The constructor is defined using the constructor keyword. Just like a constructor outside a class definition,
    it will:
create a new object
bind this to the new object, so you can refer to this in your constructor code
run the code in the constructor
return the new object.

const giles = new Person("Giles");

giles.introduceSelf(); // Hi! I'm Giles

Omitting constructors
If you don't need to do any special initialization,
   you can omit the constructor, and a default constructor will be generated for you:

class Animal {
  sleep() {
    console.log("zzzzzzz");
  }
}

const spot = new Animal();

spot.sleep(); // 'zzzzzzz'

class Professor extends Person {
  teaches;

  constructor(name, teaches) {
    super(name);
    this.teaches = teaches;
  }

  introduceSelf() {
    console.log(
      `My name is ${this.name}, and I will be your ${this.teaches} professor.`,
    );
  }

  grade(paper) {
    const grade = Math.floor(Math.random() * (5 - 1) + 1);
    console.log(grade);
  }
}

We use the extends keyword to say that this class inherits from another class.
The Professor class adds a new property teaches, so we declare that.
Since we want to set teaches when a new Professor is created, we define a constructor,
which takes the name and teaches as arguments. The first thing this constructor does is call the
superclass constructor using super(), passing up the name parameter.
The superclass constructor takes care of setting name.
After that, the Professor constructor sets the teaches property.

Encapsulation is a fundamental concept in object-oriented programming that refers
to the practice of hiding the internal details of an object and exposing only the necessary information
to the outside world.

Example:

class BankAccount {
	constructor(accountNumber, accountHolderName, balance) {
		this._accountNumber = accountNumber;
		this._accountHolderName = accountHolderName;
		this._balance = balance;
	}

	showAccountDetails() {
		console.log(`Account Number: ${this._accountNumber}`);
		console.log(`Account Holder Name: ${this._accountHolderName}`);
		console.log(`Balance: ${this._balance}`);
	}

	deposit(amount) {
		this._balance += amount;
		this.showAccountDetails();
	}

	withdraw(amount) {
		if (this._balance >= amount) {
			this._balance -= amount;
			this.showAccountDetails();
		} else {
			console.log("Insufficient Balance");
		}
	}
}

let myBankAccount = new BankAccount("123456", "John Doe", 1000);
myBankAccount.deposit(500); 
// Output: Account Number: 123456 Account Holder Name: 
//John Doe Balance: 150

