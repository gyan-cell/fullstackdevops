In JavaScript, most things are objects, from core JavaScript features like arrays to the browser APIs
built on top of JavaScript. You can even create your own objects to encapsulate related
functions and variables into efficient packages and act as handy data containers. 


Objects Prototypes : Prototype is an object that contains methods and properties and they also are the mechanism 
by which JavaScript objects inherit properties and methods from one another.


JSON : Javascript Object Notation is a standard text-based format for representing structured data on the javascript syntax 
which is commonly used in web development.

An object is a collection of related data and/or functionality.
These usually consist of several variables and functions
(which are called properties and methods when they are inside objects).


CREATION OF OBJECTS :
const person = {};
The First Object is Created Here , Now It is Empty

const person = {
  name: ["Bob", "Smith"],
  age: 32,
  bio: function () {
    console.log(`${this.name[0]} ${this.name[1]} is ${this.age} years old.`);
  },
  introduceSelf: function () {
    console.log(`Hi! I'm ${this.name[0]}.`);
  },
};

person.name;
person.name[0];
person.age;
person.bio();
// "Bob Smith is 32 years old."
person.introduceSelf();
// "Hi! I'm Bob."

The this keyword typically refers to the current object the code is being executed in.
In the context of an object method,
this refers to the object that the method was called on.

const person1 = {
  name: "Chris",
  introduceSelf() {
    console.log(`Hi! I'm ${this.name}.`);
  },
};

const person2 = {
  name: "Deepti",
  introduceSelf() {
    console.log(`Hi! I'm ${this.name}.`);
  },
};

In this case, person1.introduceSelf() outputs "Hi! I'm Chris."; person2.introduceSelf() outputs "Hi! I'm Deepti."

Sometimes we need to create many objects of the same type.

To create an object type we use an object constructor function.

It is considered good practice to name constructor functions with an upper-case first letter.

function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
    this.nationality = "English";
}

const myFather = new Person("John", "Doe", 50, "blue");
const myMother = new Person("Sally", "Rally", 48, "green");
const mySister = new Person("Anna", "Rally", 18, "green");

Constructor Function Methods
A constructor function can also have methods:

function Person(first, last, age, eyecolor) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eyecolor;
  this.fullName = function() {
    return this.firstName + " " + this.lastName;
  };
}

Adding a Method to an Object
Adding a method to a created object is easy:

myMother.changeName = function (name) {
  this.lastName = name;
}

Built-in JavaScript Constructors
JavaScript has built-in constructors for all native objects:

new Object()   // A new Object object
new Array()    // A new Array object
new Map()      // A new Map object
new Set()      // A new Set object
new Date()     // A new Date object
new RegExp()   // A new RegExp object
new Function() // A new Function object
